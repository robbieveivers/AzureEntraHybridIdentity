---
- name: Create and configure Windows VM for Entra Cloud Sync
  hosts: all
  vars:
    domain_name: "identity.robertveivers.com"
    safe_mode_password: "{{ ansible_password }}"  # Injected by Terraform
    token: "{{ offline_token }}"  # Injected by Terraform
  tasks:
    - name: Print Ansible connection variables for debug
      debug:
        msg:
          - "token: {{ token }}"
          - "ansible_user: {{ ansible_user }}"
          - "ansible_password: {{ ansible_password }}"
          - "ansible_ssh_common_args: {{ ansible_ssh_common_args | default('NOT SET') }}"

    - name: Create a directory
      win_file:
        path: C:\Users\azureuser\testdir
        state: directory

    - name: Create new AD domain using microsoft.ad.domain
      microsoft.ad.domain:
        dns_domain_name: "{{ domain_name }}"
        domain_mode: Win2025
        domain_netbios_name: IDENTITY
        forest_mode: Win2025
        safe_mode_password: "{{ safe_mode_password }}"
        reboot: true
      register: domain_install

    - name: Confirm Domain controller role
      microsoft.ad.domain_controller:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ ansible_user }}@{{ domain_name }}"
        domain_admin_password: "{{ ansible_password }}"
        safe_mode_password: "{{ safe_mode_password }}"
        state: domain_controller
        reboot: true

    - name: Ensure RSAT-AD-PowerShell is installed
      win_feature:
        name: RSAT-AD-PowerShell
        state: present

    # https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/group-managed-service-accounts/group-managed-service-accounts/create-the-key-distribution-services-kds-root-key#to-create-the-kds-root-key-in-a-test-environment-for-immediate-effectiveness
    # Added from https://docs.ansible.com/ansible/latest/collections/microsoft/ad/service_account_module.html#ansible-collections-microsoft-ad-service-account-module
    # A gMSA requires a KDS root key to be created. This key must be valid for
    # 10 hours before it can be used. This example creates the key and sets the
    # time for 10 hours ago to let it be used immediately. If your environment
    # uses multiple DCs you will still need to wait 10 hours for replication to
    # occur or target the DC you created the key on. Required Domain Admin or
    # Enterprise Admin privileges.
    - name: Create KDS root key if not present
      ansible.windows.win_powershell:
        error_action: stop
        script: |
          $Ansible.Changed = $false
          if (-not (Get-KdsRootKey)) {
              Add-KdsRootKey -EffectiveTime ((Get-Date).AddHours(-10))
              $Ansible.Changed = $true
          }

    - name: Create gMSA that allows Domain Admins to use
      microsoft.ad.service_account:
        identity: MyGMSA
        dns_hostname: MyGMSA.my_org.local
        description: GMSA for Domin Admins
        state: present
        allowed_to_retrieve_password:
          set:
            - Domain Admins

    - name: Ensure TLS 1.2 is enabled for SCHANNEL (Client)
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client
        name: Enabled
        data: 1
        type: dword

    - name: Ensure TLS 1.2 is enabled for SCHANNEL (Client) - DisabledByDefault
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client
        name: DisabledByDefault
        data: 0
        type: dword

    - name: Ensure TLS 1.2 is enabled for SCHANNEL (Server)
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server
        name: Enabled
        data: 1
        type: dword

    - name: Ensure TLS 1.2 is enabled for SCHANNEL (Server) - DisabledByDefault
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server
        name: DisabledByDefault
        data: 0
        type: dword

    - name: Ensure .NET strong crypto is enabled
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319
        name: SchUseStrongCrypto
        data: 1
        type: dword

    - name: Disable NTLM authentication (restrict outgoing NTLM traffic)
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0
        name: RestrictSendingNTLMTraffic
        data: 0 #2
        type: dword

    - name: Disable NTLM authentication (restrict incoming NTLM traffic)
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0
        name: RestrictReceivingNTLMTraffic
        data: 0 #2
        type: dword

    - name: Ensure Credential Manager service is running
      win_service:
        name: VaultSvc
        start_mode: auto
        state: started

    - name: Download msappproxy connector installer
      win_get_url:
        url: https://download.msappproxy.net/Subscription/d3c8b69d-6bf7-42be-a529-3fe9c2e70c90/Connector/previewProvisioningAgentInstaller
        dest: C:\Users\azureuser\testdir\previewProvisioningAgentInstaller.exe

    - name: Install Entra Cloud Sync Provisioning Agent (native)
      win_package:
        path: C:\Users\azureuser\testdir\previewProvisioningAgentInstaller.exe
        arguments: /quiet
        state: present

    - name: Download msappproxy connector installer
      win_get_url:
        url: https://download.msappproxy.net/Subscription/d3c8b69d-6bf7-42be-a529-3fe9c2e70c90/Connector/previewProvisioningAgentInstaller
        dest: C:\temp\AADConnectProvisioningAgentSetup.exe

    - name: Install Entra Cloud Sync Provisioning Agent (PowerShell)
      ansible.windows.win_powershell:
        script: |
          $installerProcess = Start-Process 'C:\temp\AADConnectProvisioningAgentSetup.exe' '/quiet' -NoNewWindow -PassThru
          $installerProcess.WaitForExit()

    - name: Check if Provisioning Agent PowerShell module exists
      win_stat:
        path: C:\Program Files\Microsoft Azure AD Connect Provisioning Agent\Microsoft.CloudSync.PowerShell.dll
      register: cloudsync_module

    - name: Import the Provisioning Agent PowerShell module if present
      win_shell: |
        Import-Module -Name '"C:\Program Files\Microsoft Azure AD Connect Provisioning Agent\Microsoft.CloudSync.PowerShell.dll"'
      args:
        executable: powershell.exe
      when: cloudsync_module.stat.exists

    # - name: Import the Provisioning Agent PowerShell module if present
    #   win_shell: |
    #     if (Test-Path "C:\Program Files\Microsoft Azure AD Connect Provisioning Agent\Microsoft.CloudSync.PowerShell.dll") {
    #       Import-Module "C:\Program Files\Microsoft Azure AD Connect Provisioning Agent\Microsoft.CloudSync.PowerShell.dll"
    #     }
    #   args:
    #     executable: powershell.exe
    # - name: Reboot the machine with all defaults
    #   ansible.windows.win_reboot:


    - name: Ensure AADConnectProvisioningAgent service is running
      win_service:
        name: AADConnectProvisioningAgent
        start_mode: auto
        state: started

    - name: Get an offline token, save it as token.txt, and configure Cloud Sync
      ansible.windows.win_powershell:
        script: |
          param(
            [Parameter(Mandatory=$true)]
            [String]$token,
            [Parameter(Mandatory=$true)]
            [PSCredential]$domainAdminCreds
          )
          Write-Host $token
          Import-Module "C:\\Program Files\\Microsoft Azure AD Connect Provisioning Agent\\Microsoft.CloudSync.PowerShell.dll"
          Connect-AADCloudSyncAzureAD -AccessToken $token -TenantId "921f7e73-79df-49b6-ac72-da016fcbe938" -UserPrincipalName "robert.veivers@identity.robertveivers.com"
          Add-AADCloudSyncGMSA -Credential $domainAdminCreds
          Add-AADCloudSyncADDomain -DomainName identity.robertveivers.com -Credential $domainAdminCreds
          Restart-Service -Name AADConnectProvisioningAgent -Verbose
          Write-Output "Cloud Sync configuration complete!"
        parameters:
          token: '{{ token }}'
        sensitive_parameters:
          # - name: token
          #   value: '{{ token }}'
          - name: domainAdminCreds
            username: IDENTITY\azureuser
            password: '{{ ansible_password }}'
      register: cloudsync_result
      become: yes
      become_method: runas
      become_user: SYSTEM

    - name: Show Cloud Sync fails
      debug:
        var: cloudsync_result


